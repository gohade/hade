{
  "version": 3,
  "sources": ["../../../../node_modules/mermaid/src/diagrams/class/classRenderer-v2.ts", "../../../../node_modules/mermaid/src/diagrams/class/classDiagram-v2.ts"],
  "sourcesContent": ["// @ts-ignore d3 types are not available\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport { ClassRelation, ClassNote, ClassMap, EdgeData } from './classTypes';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n\n    const styles = { labelStyle: '', style: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = 'class_box';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     */\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: 'id' + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore Ignore type error for now\n\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  // @ts-ignore Ignore type error for now\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  // @ts-ignore Ignore type error for now\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    // @ts-ignore Ignore type error for now\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n", "import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],
  "mappings": "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",
  "names": ["styles", "conf"]
}
